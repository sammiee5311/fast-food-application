version: '3.7'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    volumes:
      - type: bind
        source: ../log/elasticsearch/config.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
    networks:
      - union-kafka

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.2
    volumes:
      - type: bind
        source: ../log/logstash_config.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ../log/logstash
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5501:5501/tcp"
      - "5501:5501/udp"
      - "9600:9600"
    networks:
      - union-kafka
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    volumes:
      - type: bind
        source: ../log/kibana/config.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - union-kafka
    depends_on:
      - elasticsearch

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - union-kafka

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      JMX_PORT: 9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "registered-user:2:1"  # "twitter:2:1" if you want to try with twitter samples
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - union-kafka

  kafka_manager:
    container_name: kafka-manager
    image: hlebalbau/kafka-manager:stable
    restart: always
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: random-secret
    command: -Dpidfile.path=/dev/null
    networks:
      - union-kafka

networks:
  union-kafka:
    driver: bridge

volumes:
  elasticsearch: